import os
import unittest
from unittest.mock import patch

import pytest

from main import download_dataset, load_signatures


class TestMalwareScanner(unittest.TestCase):
    @patch("main.requests.get")
    @patch("main.tarfile.open")
    def test_fetch_dataset(self, mock_tarfile_open, mock_requests_get) -> None:
        # Mocking the requests.get method
        mock_response = mock_requests_get.return_value
        mock_response.status_code = 200
        mock_response.iter_content.side_effect = [
            b"fake_header_content" * 512,
            b"fake_file_content",
        ]

        # Mocking the tarfile.open method
        mock_tarfile = mock_tarfile_open.return_value
        mock_tarfile.__enter__.return_value = mock_tarfile
        mock_tarfile.extractall.return_value = None

        with pytest.raises(TypeError):
            download_dataset()

        mock_requests_get.assert_called_once_with(
            "https://database.clamav.net/main.cvd",
            headers={"User-Agent": "CVDUPDATE/1 (43fde49b-905f-43c6-a51b-e1324cd23299)"},
            stream=True,
        )
        mock_response.iter_content.assert_called_with(chunk_size=512)
        mock_tarfile_open.assert_called_once_with("main.cvd", "r")

    def test_load_signatures(self) -> None:
        # Create a temporary main.hdb file for testing
        with open("temp_main.hdb", "w") as temp_file:
            temp_file.write("hash1:1:virus1\nhash2:2:virus2\n")

        # Load signatures from the temporary file
        signatures = load_signatures()

        # Clean up the temporary file
        os.remove("temp_main.hdb")

        expected_signatures = {"hash1": "virus1", "hash2": "virus2"}
        assert signatures == expected_signatures
